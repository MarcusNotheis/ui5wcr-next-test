import editIcon from "@ui5/webcomponents-icons/dist/edit.js";
import {
  ActionSheet,
  AnalyticalCard,
  AnalyticalCardHeader,
  Button,
  FlexBox,
  Grid,
  Loader,
  MessageBox,
  MessageItem,
  MessageView,
  MessageViewButton,
  Modals,
  NumericSideIndicator,
  ObjectStatus,
  OverflowToolbarButton,
  OverflowToolbarToggleButton,
  ResponsiveGridLayout,
  ResponsivePopoverDomRef,
  SelectDialog,
  SplitterElement,
  SplitterLayout,
  StandardListItem,
  Text,
  Toolbar,
  ToolbarSeparator,
  ToolbarSpacer,
} from "@ui5/webcomponents-react/ssr";
import Head from "next/head";
import Link from "next/link";
import { useRef } from "react";
import styles from "../styles/Home.module.css";

const webComponents = [
  "Avatar",
  "AvatarGroup",
  "Badge",
  "Bar",
  "BarcodeScannerDialog",
  "Breadcrumbs",
  // "BreadcrumbsItem",
  "BusyIndicator",
  "Button",
  "Calendar",
  "CalendarDate",
  "Card",
  // "CardHeader",
  "Carousel",
  "CheckBox",
  "ColorPalette",
  // "ColorPaletteItem",
  "ColorPalettePopover",
  "ColorPicker",
  "ComboBox",
  // "ComboBoxGroupItem",
  // "ComboBoxItem",
  // "CustomListItem",
  "DatePicker",
  "DateRangePicker",
  "DateTimePicker",
  "Dialog",
  "DynamicSideContent",
  "FileUploader",
  // "FilterItem",
  // "FilterItemOption",
  "FlexibleColumnLayout",
  // "GroupHeaderListItem",
  "Icon",
  "IllustratedMessage",
  "Input",
  "Label",
  "Link",
  "List",
  "MediaGallery",
  // "MediaGalleryItem",
  "Menu",
  // "MenuItem",
  "MessageStrip",
  "MultiComboBox",
  // "MultiComboBoxGroupItem",
  // "MultiComboBoxItem",
  "MultiInput",
  // "NotificationAction",
  "NotificationListGroupItem",
  // "NotificationListItem",
  // "Option",
  "Page",
  "Panel",
  "Popover",
  "ProductSwitch",
  // "ProductSwitchItem",
  "ProgressIndicator",
  "RadioButton",
  "RangeSlider",
  "RatingIndicator",
  "ResponsivePopover",
  "SegmentedButton",
  // "SegmentedButtonItem",
  "Select",
  "ShellBar",
  // "ShellBarItem",
  "SideNavigation",
  // "SideNavigationItem",
  // "SideNavigationSubItem",
  "Slider",
  // "SortItem",
  "SplitButton",
  // "StandardListItem",
  "StepInput",
  // "SuggestionGroupItem",
  // "SuggestionItem",
  "Switch",
  // "Tab",
  "TabContainer",
  // "TabSeparator",
  "Table",
  // "TableCell",
  // "TableColumn",
  // "TableGroupRow",
  // "TableRow",
  "TextArea",
  "TimePicker",
  "Timeline",
  // "TimelineItem",
  "Title",
  "Toast",
  "ToggleButton",
  // "Token",
  "Tree",
  // "TreeItem",
  // "TreeItemCustom",
  "UploadCollection",
  // "UploadCollectionItem",
  "ViewSettingsDialog",
  "Wizard",
  // "WizardStep",
];

export default function Home() {
  const actionSheetRef = useRef<ResponsivePopoverDomRef>(null);

  const showMessageBox = Modals.useShowMessageBox();

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        {webComponents.map(name => {
          return <Link key={name} href={`/webcomponents/${name}`}>{name}</Link>
        })}

        <Link href={"/dynamic-page"}>Go to Dynamic Page</Link>
        <Link href={"/object-page"}>Go to Object Page</Link>
        <Link href={"/filter-bar"}>Go to FilterBar</Link>
        <Link href={"/at"}>Go to AnalyticalTable</Link>

        <ActionSheet ref={actionSheetRef} opener={"btn1"}>
          <Button>Hello World!</Button>
        </ActionSheet>

        <AnalyticalCard
          header={
            <AnalyticalCardHeader
              titleText={"Analytical Card Header"}
              value={`100`}
            >
              <NumericSideIndicator number={42} titleText={`1337`} />
            </AnalyticalCardHeader>
          }
        >
          <Button
            onClick={(e) => {
              actionSheetRef.current?.showAt(e.target);
            }}
            id="btn1"
          >
            Open an ActionSheet
          </Button>
        </AnalyticalCard>

        <Grid>
          <span>1</span>
          <span>2</span>
          <span>3</span>
        </Grid>

        <Loader />

        <Button
          onClick={() => {
            showMessageBox({ children: "Hello from my modal!" });
          }}
        >
          Show Modal
        </Button>

        <MessageBox>Hello Message Box!</MessageBox>

        <MessageViewButton counter={5} type={"Error"} />

        <ObjectStatus state="Success">Object Status</ObjectStatus>

        <Toolbar>
          <OverflowToolbarButton
            icon={editIcon}
            tooltip="Text only visible in popover"
          >
            OverflowToolbarButton (only visible in popover)
          </OverflowToolbarButton>
          <OverflowToolbarToggleButton
            icon={editIcon}
            tooltip="Text only visible in popover"
          >
            OverflowToolbarToggleButton (only visible in popover)
          </OverflowToolbarToggleButton>
          <Button>Hello</Button>
          <ToolbarSpacer />
          <Button>Hello</Button>
          <ToolbarSeparator />
          <Button>Hello</Button>
        </Toolbar>

        <ResponsiveGridLayout>
          <span>1</span>
          <span>2</span>
          <span>3</span>
        </ResponsiveGridLayout>

        <SelectDialog>
          <StandardListItem description="LT-100">
            Gaming Laptop
          </StandardListItem>
          <StandardListItem description="LT-201">
            Business Laptop
          </StandardListItem>
        </SelectDialog>

        <SplitterLayout>
          <SplitterElement>
            <MessageView>
              <MessageItem titleText={"Some really bad error"} type={"Error"}>
                Bla bla bla
              </MessageItem>
            </MessageView>
          </SplitterElement>
          <SplitterElement>
            <FlexBox>
              <Text>Hello World!</Text>
              <Text>Hello World 2!</Text>
              <Text>Hello World 3!</Text>
            </FlexBox>
          </SplitterElement>
        </SplitterLayout>
      </main>
    </div>
  );
}
